/**    
 * 文件名：udpServer.java    
 *    
 * 版本信息：    
 * 日期：2018年4月16日    
 * Copyright 足下 Corporation 2018     
 * 版权所有    
 *    
 */
package fastRpc.jason.udp;

import java.io.IOException;
import java.net.DatagramPacket;
import java.net.DatagramSocket;

import INet.ISocketHander;
import UDP.udpSocket;
import fastRpc.jason.inet.INetServer;
import fastRpc.jason.inet.IRecvieHander;
import fastRpc.jason.inet.JYSocket;
import fastRpc.jason.net.BufferManager;
import fastRpc.jason.net.JSocket;
import fastRpc.jason.net.NetType;

/**    
 *     
 * 项目名称：net    
 * 类名称：udpServer    
 * 类描述：    udp
 * 创建人：jinyu    
 * 创建时间：2018年4月16日 上午1:44:27    
 * 修改人：jinyu    
 * 修改时间：2018年4月16日 上午1:44:27    
 * 修改备注：    
 * @version     
 *     
 */
@NetType("udp_Server")
public class udpServer implements INetServer {
    private DatagramSocket datagramSocket = null;
    private   int localPort=0;
    private  String localIP="";
    private IRecvieHander hander=null;
    private int maxSzie=65535;
    private byte[] buffer=null;
    private volatile boolean isRun=true;
   
    private void startThread()
    {
        Thread rec=new Thread(new Runnable() {

            @Override
            public void run() {
                DatagramPacket datagramPacket=null;
                if(localIP.isEmpty()||localPort==0)
                {
                    localIP=datagramSocket.getLocalAddress().getHostAddress();
                    localPort=datagramSocket.getLocalPort();
                }
                datagramPacket = new DatagramPacket(buffer, buffer.length);
                while(isRun){   
                    try {
                        datagramSocket.receive(datagramPacket);
                        byte[] tmp=new byte[datagramPacket.getLength()];
                        System.arraycopy(buffer, 0, tmp, 0, tmp.length);
                        String from=datagramPacket.getAddress().getHostAddress()+":"+datagramPacket.getPort();
                        byte[] recbytes=BufferManager.getInstance().add(from, tmp);
                       if(recbytes!=null)
                       {
                           JYSocket jclient=new JYSocket();
                           jclient.isTcpType=true;
                           udpClient c=new udpClient();
                           c.setLocalIP(localIP);
                           c.setLocalPort(localPort);
                           c.setRemoteIP(datagramPacket.getAddress().getHostAddress());
                           c.setRemotePort(datagramPacket.getPort());
                           c.setClient(datagramPacket);
                           jclient.socket=c;
                           jclient.localIP=localIP;
                           jclient.localPort=localPort;
                           jclient.srvIP=datagramPacket.getAddress().getHostAddress();
                           jclient.srvPort=datagramPacket.getPort();
                           hander.recviceData(recbytes); 
                       }
                    } catch (IOException e) {
                       
                        e.printStackTrace();
                    }
                   
                  
                }    
                
            }
            
        });
        rec.setDaemon(true);
        rec.setName("udpserverrec");
        if(!rec.isAlive())
        {
           rec.start();
        }
    }
    /* (non-Javadoc)    
     * @see fastRpc.jason.inet.INetServer#setLocalIP(java.lang.String)    
     */
    @Override
    public void setLocalIP(String ip) {
      this.localIP=ip;

    }

    /* (non-Javadoc)    
     * @see fastRpc.jason.inet.INetServer#setLocalPort(int)    
     */
    @Override
    public void setLocalPort(int port) {
      this.localPort=port;

    }

    /* (non-Javadoc)    
     * @see fastRpc.jason.inet.INetServer#start()    
     */
    @Override
    public boolean start() {
        // TODO Auto-generated method stub
        return false;
    }

    /* (non-Javadoc)    
     * @see fastRpc.jason.inet.INetServer#start(fastRpc.jason.inet.IRecvieHander)    
     */
    @Override
    public boolean start(IRecvieHander hander) {
        // TODO Auto-generated method stub
        return false;
    }

    /* (non-Javadoc)    
     * @see fastRpc.jason.inet.INetServer#recvice()    
     */
    @Override
    public JYSocket recvice() {
        // TODO Auto-generated method stub
        return null;
    }

    /* (non-Javadoc)    
     * @see fastRpc.jason.inet.INetServer#close()    
     */
    @Override
    public void close() {
        // TODO Auto-generated method stub

    }

}
