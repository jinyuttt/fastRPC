/**    
 * 文件名：TcpClient.java    
 *    
 * 版本信息：    
 * 日期：2018年4月15日    
 * Copyright 足下 Corporation 2018     
 * 版权所有    
 *    
 */
package fastRpc.jason.tcp;

import java.io.IOException;
import java.net.InetSocketAddress;
import java.net.Socket;
import java.net.SocketAddress;
import java.util.concurrent.LinkedBlockingQueue;

import INet.ISocketHander;
import fastRpc.jason.inet.INetClient;
import fastRpc.jason.inet.IRecvieHander;
import fastRpc.jason.inet.JYSocket;

/**    
 *     
 * 项目名称：net    
 * 类名称：TcpClient    
 * 类描述：    tcp客户端
 * 创建人：jinyu    
 * 创建时间：2018年4月15日 下午1:33:13    
 * 修改人：jinyu    
 * 修改时间：2018年4月15日 下午1:33:13    
 * 修改备注：    
 * @version     
 *     
 */
public class TcpClient implements INetClient {
    private  Socket client=null;
    private IRecvieHander hander=null;
    private  volatile boolean isRun=false;
    private String localIP="";
    private int localPort=0;
    private String remoteIP="";
    private int remotePort=0;
    private int recSize=1024*1024;
    private LinkedBlockingQueue<JYSocket> queue=new LinkedBlockingQueue<JYSocket>();
    public TcpClient()
    {
        client=new Socket();
       
        
    }
    private   void bind()
    {
        if(!localIP.isEmpty()||localPort!=0)
        {
            InetSocketAddress bindpoint=null;
            if(localIP.isEmpty())
            {
                bindpoint = new InetSocketAddress(localPort);
            }
            else
            {
               bindpoint = new InetSocketAddress(localIP, localPort);
            }
            try {
                client.bind(bindpoint);
            } catch (IOException e) {
            
                e.printStackTrace();
            }
        }
    }
    private void  startRec()
    {
        if(isRun)
        {
            return;
        }
        isRun=true;
        
        Thread rec=new Thread(new Runnable() {

            @Override
            public void run() {
             
                client.getInputStream().read(arg0);
            }
            
        });
    }
    /* (non-Javadoc)    
     * @see fastRpc.jason.inet.INetClient#setLocalIP(java.lang.String)    
     */
    @Override
    public void setLocalIP(String ip) {
      this.localIP=ip;

    }

    /* (non-Javadoc)    
     * @see fastRpc.jason.inet.INetClient#setLocalPort(int)    
     */
    @Override
    public void setLocalPort(int port) {
      this.localPort=port;

    }

    /* (non-Javadoc)    
     * @see fastRpc.jason.inet.INetClient#setRemoteIP(java.lang.String)    
     */
    @Override
    public void setRemoteIP(String ip) {
       this.remoteIP=ip;

    }

    /* (non-Javadoc)    
     * @see fastRpc.jason.inet.INetClient#setRemotePort(int)    
     */
    @Override
    public void setRemotePort(int port) {
      this.remotePort=port;

    }

    /* (non-Javadoc)    
     * @see fastRpc.jason.inet.INetClient#connect(java.lang.String, int)    
     */
    @Override
    public boolean connect(String remoteIP, int remotePort) {
        this.remoteIP=remoteIP;
        this.remotePort=remotePort;
        //
         bind();
         SocketAddress endpoint=new InetSocketAddress(remoteIP,remotePort);
         try {
            client.connect(endpoint);
            return true;
        } catch (IOException e) {
         
            e.printStackTrace();
            return false;
        }
    }

    /* (non-Javadoc)    
     * @see fastRpc.jason.inet.INetClient#connect()    
     */
    @Override
    public boolean connect() {
        bind();
        SocketAddress endpoint=new InetSocketAddress(remoteIP,remotePort);
        try {
           client.connect(endpoint);
           return true;
       } catch (IOException e) {
        
           e.printStackTrace();
           return false;
       }
    }

    /* (non-Javadoc)    
     * @see fastRpc.jason.inet.INetClient#sendData(byte[])    
     */
    @Override
    public void sendData(byte[] data) {
       try {
        client.getOutputStream().write(data);
    } catch (IOException e) {
        e.printStackTrace();
    }
   
    }

    /* (non-Javadoc)    
     * @see fastRpc.jason.inet.INetClient#sendData(java.lang.String, int, byte[])    
     */
    @Override
    public void sendData(String ip, int port, byte[] data) {
         this.sendData(data);
    }

    /* (non-Javadoc)    
     * @see fastRpc.jason.inet.INetClient#recviceData()    
     */
    @Override
    public byte[] recviceData() {
      try {
        return  queue.take().data;
    } catch (InterruptedException e) {
      
        e.printStackTrace();
    }
    return null;
    }

    /* (non-Javadoc)    
     * @see fastRpc.jason.inet.INetClient#recvice()    
     */
    @Override
    public JYSocket recvice() {
        try {
          
            data.data=queue.take().buffer;
            if(this.localIP.isEmpty()||this.localPort==0)
            {
                this.localIP=this.client.getLocalAddress().getHostAddress();
                this.localPort=this.client.getLocalPort();
            }
            data.localIP=this.localIP;
            data.localPort=this.localPort;
            data.srvIP=this.remoteIP;
            data.srvPort=this.remotePort;
            return  data;
        } catch (InterruptedException e) {
          
            e.printStackTrace();
        }
        return null;
    }

    /* (non-Javadoc)    
     * @see fastRpc.jason.inet.INetClient#startRecvice(fastRpc.jason.inet.IRecvieHander)    
     */
    @Override
    public void startRecvice(IRecvieHander hander) {
        
    }
    @Override
    public void setBufferSize(int size) {
       this.recSize=size;
        
    }

}
